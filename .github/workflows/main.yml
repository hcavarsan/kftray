name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  VITE_ENV: 'production'
  TAURI_DEBUG: 'false'

jobs:
  macos-universal:
    permissions:
      contents: write
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Reconfigure for MacOS Universal
        run: rustup target add aarch64-apple-darwin && rustup target add x86_64-apple-darwin

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build the app for MacOS Universal
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
          # MacOS Signing:
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target universal-apple-darwin --bundles dmg,updater --verbose

      - name: Build kftray-tui for x86_64
        run: cargo build --release --bin kftray-tui --target x86_64-apple-darwin

      - name: Build kftray-tui for aarch64
        run: cargo build --release --bin kftray-tui --target aarch64-apple-darwin

      - name: Create universal binary
        run: lipo -create -output ./target/release/kftray-tui ./target/x86_64-apple-darwin/release/kftray-tui ./target/aarch64-apple-darwin/release/kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-macos-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  ubuntu-amd64:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build the app for Linux amd64
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target x86_64-unknown-linux-gnu --bundles appimage,updater --verbose

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-linux-amd64-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  ubuntu-arm64:
    permissions:
      contents: write
    runs-on: ubicloud-standard-4-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev perl

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Reconfigure for Linux ARM64
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build the appimage for Linux ARM
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target aarch64-unknown-linux-gnu --bundles appimage,updater --verbose

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-linux-arm64-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  windows-x86_64:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Reconfigure for Windows x86_64
        run: rustup target add x86_64-pc-windows-msvc

      - name: Build the app for Windows x86_64
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target x86_64-pc-windows-msvc --bundles nsis,updater  --verbose

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-windows-x86_64-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  windows-x86:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Reconfigure for Windows x86
        run: rustup target add i686-pc-windows-msvc

      - name: Build the app for Windows x86
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target i686-pc-windows-msvc --bundles nsis,updater --verbose

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-windows-x86-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  windows-arm64:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install dependencies for Windows on ARM64
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: amd64_arm64

      - name: Reconfigure for Windows on ARM64
        run: rustup target add aarch64-pc-windows-msvc

      - name: Build the app for Windows on ARM64
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: --target aarch64-pc-windows-msvc --bundles nsis,updater --verbose

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-windows-arm64-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  build-and-push-docker:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./crates/kftray-server
          file: ./crates/kftray-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:latest

  upload-release-assets:
    needs: [macos-universal, ubuntu-amd64, ubuntu-arm64, windows-x86_64, windows-x86, windows-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const release = releases.find(r => r.tag_name === process.env.GITHUB_REF_NAME);
            if (release) {
              core.setOutput('release_id', release.id);
            } else {
              core.setOutput('release_id', '');
            }

      - name: Create release if not exists
        if: steps.check_release.outputs.release_id == ''
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "KFtray - ${{ github.ref_name }}"
          body: "See the assets to download this version and install."
          draft: true
          prerelease: false

      - name: Upload kftray-tui macOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-macos-${{ github.ref_name }}
          asset_name: kftray-tui-macos-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload kftray-tui Linux amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-linux-amd64-${{ github.ref_name }}
          asset_name: kftray-tui-linux-amd64-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload kftray-tui Linux arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-linux-arm64-${{ github.ref_name }}
          asset_name: kftray-tui-linux-arm64-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload kftray-tui Windows x86_64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-windows-x86_64-${{ github.ref_name }}
          asset_name: kftray-tui-windows-x86_64-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload kftray-tui Windows x86 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-windows-x86-${{ github.ref_name }}
          asset_name: kftray-tui-windows-x86-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload kftray-tui Windows arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/kftray-tui-windows-arm64-${{ github.ref_name }}
          asset_name: kftray-tui-windows-arm64-${{ github.ref_name }}
          asset_content_type: application/octet-stream
