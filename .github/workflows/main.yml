name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  VITE_ENV: 'production'
  TAURI_DEBUG: 'false'

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        arch: [x86_64, arm64]
        include:
          - os: macos-latest
            arch: universal
          - os: ubuntu-latest
            arch: amd64
          - os: ubuntu-latest
            arch: arm64
            runner: ubicloud-standard-4-arm
          - os: windows-latest
            arch: x86_64
          - os: windows-latest
            arch: x86
          - os: windows-latest
            arch: arm64

    runs-on: ${{ matrix.runner || matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Setup platform-specific dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev

      - name: Setup Windows ARM64 dependencies
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: amd64_arm64

      - name: Reconfigure Rust targets
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            rustup target add aarch64-apple-darwin x86_64-apple-darwin
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            rustup target add aarch64-unknown-linux-gnu
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              rustup target add x86_64-pc-windows-msvc
            elif [ "${{ matrix.arch }}" == "x86" ]; then
              rustup target add i686-pc-windows-msvc
            elif [ "${{ matrix.arch }}" == "arm64" ]; then
              rustup target add aarch64-pc-windows-msvc
            fi
          fi

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: ${{ matrix.os == 'macos-latest' && '--target universal-apple-darwin --bundles dmg,updater --verbose' || matrix.os == 'ubuntu-latest' && '--target x86_64-unknown-linux-gnu --bundles appimage,updater --verbose' || matrix.os == 'windows-latest' && '--target x86_64-pc-windows-msvc --bundles nsis,updater --verbose' }}

      - name: Build kftray-tui
        run: cargo build --release --bin kftray-tui --target ${{ matrix.arch == 'universal' && 'universal-apple-darwin' || matrix.arch == 'amd64' && 'x86_64-unknown-linux-gnu' || matrix.arch == 'arm64' && 'aarch64-unknown-linux-gnu' || matrix.arch == 'x86_64' && 'x86_64-pc-windows-msvc' || matrix.arch == 'x86' && 'i686-pc-windows-msvc' || matrix.arch == 'arm64' && 'aarch64-pc-windows-msvc' }}

      - name: Upload kftray-tui artifact
        uses: actions/upload-artifact@v3
        with:
          name: kftray-tui-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: ./target/release/kftray-tui

  build-and-push-docker:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./crates/kftray-server
          file: ./crates/kftray-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:latest

  upload-release-assets:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_release.outputs.release_id != '' && steps.check_release.outputs.release_id || steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/
          asset_name: kftray-tui-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          asset_content_type: application/octet-stream
