name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  VITE_ENV: 'production'
  TAURI_DEBUG: 'false'

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: arm64
            runner: ubicloud-standard-4-arm
            rust_target: aarch64-unknown-linux-gnu
            tauri_args: '--target aarch64-unknown-linux-gnu --bundles appimage,updater --verbose'
          - os: ubuntu-latest
            arch: amd64
            rust_target: x86_64-unknown-linux-gnu
            tauri_args: '--target x86_64-unknown-linux-gnu --bundles appimage,updater --verbose'
          - os: macos-latest
            arch: universal
            rust_target: universal-apple-darwin
            tauri_args: '--target universal-apple-darwin --bundles dmg,updater --verbose'
          - os: windows-latest
            arch: arm64
            rust_target: aarch64-pc-windows-msvc
            tauri_args: '--target aarch64-pc-windows-msvc --bundles nsis,updater --verbose'
          - os: windows-latest
            arch: x86
            rust_target: i686-pc-windows-msvc
            tauri_args: '--target i686-pc-windows-msvc --bundles nsis,updater --verbose'
          - os: windows-latest
            arch: x86_64
            rust_target: x86_64-pc-windows-msvc
            tauri_args: '--target x86_64-pc-windows-msvc --bundles nsis,updater --verbose'

    runs-on: ${{ matrix.runner || matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.1.2

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Setup platform-specific dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev

      - name: Setup Windows ARM64 dependencies
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: amd64_arm64

      - name: Reconfigure Rust targets
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            rustup target add aarch64-apple-darwin x86_64-apple-darwin
          else
            rustup target add ${{ matrix.rust_target }}
          fi
        shell: bash

      - name: Setup Visual Studio Environment
        if: matrix.os == 'windows-latest'
        run: |
          echo "Setting up Visual Studio environment"
          vs_install_path=$(vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath)
          if [ -z "$vs_install_path" ]; then
            echo "Visual Studio installation not found"
            exit 0
          fi
          echo "Found Visual Studio at $vs_install_path"
          call "$vs_install_path\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
        shell: cmd

      - name: Extract TUI version
        id: extract_version
        run: echo "::set-output name=TUI_VERSION::$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "kftray-tui") | .version')"

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: ${{ matrix.tauri_args }}

      - name: Import Apple Certificate
        if: matrix.os == 'macos-latest'
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        shell: bash

      - name: Build kftray-tui
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            cargo build --release --bin kftray-tui --target aarch64-apple-darwin
            cargo build --release --bin kftray-tui --target x86_64-apple-darwin
            lipo -create -output ./target/release/kftray-tui ./target/x86_64-apple-darwin/release/kftray-tui ./target/aarch64-apple-darwin/release/kftray-tui
          else
            cargo build --release --bin kftray-tui --target ${{ matrix.rust_target }}
          fi
        shell: bash

      - name: Sign kftray-tui binary
        if: matrix.os == 'macos-latest'
        run: |
          codesign --deep --force --verbose --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" ./target/release/kftray-tui
        shell: bash

      - name: List built files for debugging
        run: |
          echo "Listing files in target/release:"
          ls -al target/release
          echo "Listing files in target/${{ matrix.rust_target }}/release:"
          ls -al target/${{ matrix.rust_target }}/release
        shell: bash

      - name: Rename and upload release asset
        run: |
          TUI_VERSION=${{ steps.extract_version.outputs.TUI_VERSION }}
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            cd target/release
            mv kftray-tui kftray-tui_${TUI_VERSION}_macos-universal
            gh release upload ${{ github.ref_name }} kftray-tui_${TUI_VERSION}_macos-universal --clobber
          else
            cd target/${{ matrix.rust_target }}/release
            mv kftray-tui kftray-tui_${TUI_VERSION}_${{ matrix.os }}_${{ matrix.arch }}
            gh release upload ${{ github.ref_name }} kftray-tui_${TUI_VERSION}_${{ matrix.os }}_${{ matrix.arch }} --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

  build-and-push-docker:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./crates/kftray-server
          file: ./crates/kftray-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:latest
