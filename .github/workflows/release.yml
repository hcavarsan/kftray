name: Release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

permissions:
  contents: read
  statuses: write

env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  VITE_ENV: "production"
  TAURI_DEBUG: "false"

jobs:
  validate-version:
    runs-on: ubuntu-24.04
    steps:
      - name: Validate version format
        run: |
          if ! [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "Invalid version format. Must be vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi

  rust-coverage:
    name: Code Coverage
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt install -y \
              build-essential \
              curl \
              wget \
              file \
              libxdo-dev \
              libssl-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2 \
              xdg-utils

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly

      - name: Install llvm-tools
        run: rustup component add llvm-tools

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@2383334cf567d78771fc7d89b6b3802ef1412cf6
        with:
          tool: cargo-llvm-cov

      - name: Install nextest
        uses: taiki-e/install-action@2383334cf567d78771fc7d89b6b3802ef1412cf6
        with:
          tool: cargo-nextest

      - name: Install rust-cache
        uses: swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          key: rust-coverage

      - name: Run tests
        env:
          RUSTFLAGS: "-C target-cpu=native -C link-arg=-s"
        run: cargo build --bin kftray-helper --release && INSTA_UPDATE=1 cargo llvm-cov nextest --profile ci --config-file .cargo/nextest.toml --locked --workspace --all-features --lib --bins --examples --tests --lcov --output-path lcov.info

      - name: Upload test results
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f
        if: ${{ !cancelled() }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/nextest/ci/junit.xml
          disable_search: true
          slug: hcavarsan/kftray

      - name: Upload coverage
        uses: codecov/codecov-action@2db07e317924c76f654a414629d71c65876882e2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          disable_search: true
          slug: hcavarsan/kftray

  create-release-draft:
    needs:
    - validate-version
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f
        with:
          fetch-depth: 0

      - name: Check existing release
        id: check_release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Attempt to get release ID and check if it's a valid number
          release_id=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq .id 2>/dev/null || echo "")
          if [[ "$release_id" =~ ^[0-9]+$ ]]; then
            echo "Release already exists with ID: $release_id"
            echo "release_exists=true" >> "$GITHUB_OUTPUT"
            echo "existing_release_id=$release_id" >> "$GITHUB_OUTPUT"
          else
            echo "Release does not exist"
            echo "release_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create release draft
        id: create_release
        if: steps.check_release.outputs.release_exists != 'true'
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          tag_name: ${{ github.ref_name }}
          name: "KFtray - ${{ github.ref_name }}"
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set release ID output
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            echo "id=${{ steps.check_release.outputs.existing_release_id }}" >> "$GITHUB_OUTPUT"
          else
            echo "id=${{ steps.create_release.outputs.id }}" >> "$GITHUB_OUTPUT"
          fi

  kftray-tauri:
    needs: create-release-draft
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: arm64
            runner: ubicloud-standard-4-arm-ubuntu-2404
            rust_target: aarch64-unknown-linux-gnu
            tauri_args: "--target aarch64-unknown-linux-gnu --bundles appimage,updater --verbose"
          - os: ubuntu-24.04
            arch: amd64
            rust_target: x86_64-unknown-linux-gnu
            tauri_args: "--target x86_64-unknown-linux-gnu --bundles appimage,updater --verbose"
          - os: macos-latest
            arch: universal
            rust_target: universal-apple-darwin
            tauri_args: "--target universal-apple-darwin --bundles dmg,app,updater --verbose"
          - os: windows-latest
            arch: x86
            rust_target: i686-pc-windows-msvc
            tauri_args: "--target i686-pc-windows-msvc --bundles nsis,updater --verbose"
            msvc_arch: x86
          - os: windows-latest
            arch: x86_64
            rust_target: x86_64-pc-windows-msvc
            tauri_args: "--target x86_64-pc-windows-msvc --bundles nsis,updater --verbose"
            msvc_arch: x64
          - os: windows-latest
            arch: arm64
            rust_target: aarch64-pc-windows-msvc
            tauri_args: "--target aarch64-pc-windows-msvc --bundles nsis,updater --verbose"

    runs-on: ${{ matrix.runner || matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly

      - name: Cache Rust
        uses: swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          key: kftray-tauri-${{ matrix.rust_target }}

      - name: Install pnpm
        uses: pnpm/action-setup@f2b2b233b538f500472c7274c7012f57857d8ce0
        with:
          version: 10
          run_install: |
           - recursive: true
             args: [--frozen-lockfile]


      - name: Install Node.js
        uses: actions/setup-node@7e24a656e1c7a0d6f3eaef8d8e84ae379a5b035b
        with:
          node-version: "22"
          cache: "pnpm"


      - name: Cache pnpm modules
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ matrix.arch }}-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ matrix.arch }}-

      - name: Set up Visual Studio shell
        if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
        uses: TheMrMilchmann/setup-msvc-dev@fb19abb8a41b3cf0340f5d1be17d420309232be6
        with:
          arch: amd64_arm64

      - name: Setup platform-specific dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt install -y \
              build-essential \
              curl \
              wget \
              file \
              libxdo-dev \
              libssl-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2 \
              xdg-utils

      - name: Reconfigure Rust targets
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            rustup target add aarch64-apple-darwin x86_64-apple-darwin
          else
            rustup target add ${{ matrix.rust_target }}
          fi
        shell: bash

      - name: Build kftray-helper for multiple architectures (macOS)
        if: matrix.os == 'macos-latest'
        env:
          RUSTFLAGS: "-C link-arg=-s"
        run: |
          cargo build --bin kftray-helper --release --target x86_64-apple-darwin
          cargo build --bin kftray-helper --release --target aarch64-apple-darwin
          cp -rf ./target/aarch64-apple-darwin/release/kftray-helper ./target/release/kftray-helper-aarch64-apple-darwin
          cp -rf ./target/x86_64-apple-darwin/release/kftray-helper ./target/release/kftray-helper-x86_64-apple-darwin
          lipo -create -output ./crates/kftray-tauri/bin/kftray-helper-universal-apple-darwin ./target/release/kftray-helper-x86_64-apple-darwin ./target/release/kftray-helper-aarch64-apple-darwin
        shell: bash

      - name: Sign and notarize the helper binary
        if: matrix.os == 'macos-latest'
        uses: toitlang/action-macos-sign-notarize@64b6d845b70ccd71bde584769280c612d48211db
        with:
          certificate: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          username: ${{ secrets.APPLE_ID }}
          password: ${{ secrets.APPLE_PASSWORD }}
          apple-team-id: 6M376JWU73
          app-path: crates/kftray-tauri/bin/kftray-helper-universal-apple-darwin
          entitlements-path: crates/kftray-helper/macos-helper-entitlements.plist

      - name: Build kftray-tauri Desktop App
        uses: tauri-apps/tauri-action@42e9df6c59070d114bf90dcd3943a1b8f138b113
        id: tauri_build
        continue-on-error: true
        env:
          RUSTFLAGS: ${{ matrix.os == 'macos-latest' && '-C link-arg=-s' || '-C target-cpu=native -C link-arg=-s' }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: ${{ matrix.tauri_args }}

      - name: Retry Build on Failure
        if: steps.tauri_build.outcome == 'failure'
        uses: tauri-apps/tauri-action@42e9df6c59070d114bf90dcd3943a1b8f138b113
        env:
          RUSTFLAGS: ${{ matrix.os == 'macos-latest' && '-C link-arg=-s' || '-C target-cpu=native -C link-arg=-s' }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=6000
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "KFtray - ${{ github.ref_name }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          updaterJsonKeepUniversal: true
          args: ${{ matrix.tauri_args }}

  kftui:
    needs: create-release-draft
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            runner: ubicloud-standard-4-arm-ubuntu-2404
            arch: arm64
            rust_target: aarch64-unknown-linux-gnu
            os_name: linux
          - os: ubuntu-24.04
            arch: amd64
            rust_target: x86_64-unknown-linux-gnu
            os_name: linux
          - os: macos-latest
            arch: universal
            rust_target: universal-apple-darwin
            os_name: macos
          - os: windows-latest
            arch: x86
            rust_target: i686-pc-windows-msvc
            msvc_arch: x86
            os_name: windows
          - os: windows-latest
            arch: x86_64
            rust_target: x86_64-pc-windows-msvc
            msvc_arch: x64
            os_name: windows

    runs-on: ${{  matrix.runner || matrix.os }}

    outputs:
      os: ${{ matrix.os }}
      arch: ${{ matrix.arch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly

      - name: Cache Rust
        uses: swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          key: kftui-${{ matrix.rust_target }}

      - name: Install pnpm
        uses: pnpm/action-setup@f2b2b233b538f500472c7274c7012f57857d8ce0
        with:
          version: 10
          run_install: |
           - recursive: true
             args: [--frozen-lockfile]

      - name: Install Node.js
        uses: actions/setup-node@7e24a656e1c7a0d6f3eaef8d8e84ae379a5b035b
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Cache pnpm modules
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            $(pnpm store path --silent)
            **/node_modules
          key: ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-${{ runner.ARCH }}-

      - name: Setup platform-specific dependencies
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt install -y \
              build-essential \
              curl \
              wget \
              file \
              libxdo-dev \
              libssl-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2 \
              xdg-utils

      - name: Reconfigure Rust targets
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            rustup target add aarch64-apple-darwin x86_64-apple-darwin
          else
            rustup target add ${{ matrix.rust_target }}
          fi
        shell: bash

      - name: Install OpenSSL on Windows
        if: matrix.os == 'windows-latest'
        run: choco install openssl

      - name: Set up Perl on Windows
        if: matrix.os == 'windows-latest'
        uses: shogo82148/actions-setup-perl@2fde72b7b7b24c986737ffc0eb0cbba8622c9d78
        with:
          perl-version: "5.32"
          distribution: "strawberry"

      - name: Set Perl environment variables
        if: matrix.os == 'windows-latest'
        run: |
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Build kftui
        env:
          RUSTFLAGS: ${{ matrix.os == 'macos-latest' && '-C link-arg=-s' || '-C target-cpu=native -C link-arg=-s' }}
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            cargo build --release --bin kftui --target aarch64-apple-darwin
            cargo build --release --bin kftui --target x86_64-apple-darwin
            lipo -create -output ./target/release/kftui ./target/x86_64-apple-darwin/release/kftui ./target/aarch64-apple-darwin/release/kftui
          else
            cargo build --release --bin kftui --target ${{ matrix.rust_target }}
          fi
        shell: bash

      - name: Sign and notarize the release build
        if: matrix.os == 'macos-latest'
        uses: toitlang/action-macos-sign-notarize@64b6d845b70ccd71bde584769280c612d48211db
        with:
          certificate: ${{ secrets.APPLE_CERTIFICATE }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          username: ${{ secrets.APPLE_ID }}
          password: ${{ secrets.APPLE_PASSWORD }}
          apple-team-id: 6M376JWU73
          app-path: target/release/kftui
          entitlements-path: crates/kftui/entitlements.plist

      - name: Rename and upload release asset
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv ./target/release/kftui ./target/release/kftui_macos_universal
            gh release upload ${{ github.ref_name }} ./target/release/kftui_macos_universal --clobber
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv ./target/${{ matrix.rust_target }}/release/kftui.exe ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}.exe
            chmod +x ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}.exe
            gh release upload ${{ github.ref_name }} ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}.exe
          else
            mv ./target/${{ matrix.rust_target }}/release/kftui ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}
            chmod +x ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}
            gh release upload ${{ github.ref_name }} ./target/release/kftui_${{ matrix.os_name }}_${{ matrix.arch }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        shell: bash

  kftray-server:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Set up QEMU
        uses: docker/setup-qemu-action@05340d1c670183e7caabdb33ae9f1c80fae3b0c2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to GitHub Container Registry
        uses: docker/login-action@3d100841f68d4548bf57e52eb27bd33ec5069f55
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          platforms: linux/amd64,linux/arm64
          context: ./crates/kftray-server
          file: ./crates/kftray-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/kftray-server:latest

  update-release:
    needs: [kftray-tauri, kftui, kftray-server, create-release-draft]
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, '-beta') &&
      !contains(github.ref, '-alpha')
    steps:
      - name: Checkout
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f
        with:
          fetch-depth: 0

      - name: Generate changelog
        uses: orhun/git-cliff-action@104a6cf3c9aa0fdfe4eab129f9c1900e1eb8f7fd
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest --strip header
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release notes
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-release-draft.outputs.release_id }},
                body: `${{ steps.git-cliff.outputs.content }}`,
                tag_name: process.env.GITHUB_REF_NAME,
                name: `KFtray - ${process.env.GITHUB_REF_NAME}`
              });
            } catch (error) {
              console.error('Failed to update release notes:', error);
              if (error.status === 404) {
                console.log('Release not found, retrying after short delay...');
                await new Promise(resolve => setTimeout(resolve, 5000));
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ needs.create-release-draft.outputs.release_id }},
                  body: `${{ steps.git-cliff.outputs.content }}`,
                  tag_name: process.env.GITHUB_REF_NAME,
                  name: `KFtray - ${process.env.GITHUB_REF_NAME}`
                });
              } else {
                throw error;
              }
            }

      - name: Publish release
        uses: eregon/publish-release@70a6784870e7313347f6aa7fa7783786f2c1692f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release-draft.outputs.release_id }}

  publish-cargo-crates:
    needs: [kftui]
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, '-beta') &&
      !contains(github.ref, '-alpha')
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly

      - name: Cache Rust
        uses: swatinem/rust-cache@7e1e2d0a10862b34e5df481373b2b0f295d1a2ef
        with:
          key: publish-cargo-crates

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt install -y \
              build-essential \
              curl \
              wget \
              file \
              libxdo-dev \
              libssl-dev \
              libayatana-appindicator3-dev \
              librsvg2-dev \
              libwebkit2gtk-4.1-0=2.44.0-2 \
              libwebkit2gtk-4.1-dev=2.44.0-2 \
              libjavascriptcoregtk-4.1-0=2.44.0-2 \
              libjavascriptcoregtk-4.1-dev=2.44.0-2 \
              gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
              gir1.2-webkit2-4.1=2.44.0-2 \
              xdg-utils


      - name: Publish crates to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          publish_crate() {
            local crate_path="$1"
            local crate_name=$(basename "$crate_path")
            local max_retries=3
            local retry_delay=30

            echo "Publishing $crate_name..."
            cd "$crate_path"

            for attempt in $(seq 1 $max_retries); do
              echo "Attempt $attempt/$max_retries for $crate_name"

              if cargo publish --token $CARGO_REGISTRY_TOKEN; then
                echo "Successfully published $crate_name"
                cd - > /dev/null
                return 0
              fi

              local exit_code=$?
              if [ $exit_code -eq 0 ]; then
                cd - > /dev/null
                return 0
              fi

              if cargo publish --dry-run --token $CARGO_REGISTRY_TOKEN 2>&1 | grep -q "already uploaded\|already exists"; then
                echo "$crate_name already published, skipping"
                cd - > /dev/null
                return 0
              fi

              if [ $attempt -lt $max_retries ]; then
                echo "Retrying $crate_name in ${retry_delay}s... (attempt $((attempt + 1))/$max_retries)"
                sleep $retry_delay
                retry_delay=$((retry_delay * 2))
              else
                echo "Failed to publish $crate_name after $max_retries attempts"
                cd - > /dev/null
                return 1
              fi
            done
          }
          crates=(
            "crates/kftray-commons"
            "crates/kftray-helper"
            "crates/kftray-http-logs"
            "crates/kftray-portforward"
            "crates/kftray-network-monitor"
            "crates/kftui"
          )

          for crate in "${crates[@]}"; do
            publish_crate "$crate"
            if [ "$crate" != "crates/kftui" ]; then
              echo "Waiting 60s to avoid rate limiting..."
              sleep 60
            fi
          done

          echo "All crates published successfully!"

  update-homebrew:
    needs: [update-release]
    permissions:
      contents: write
    runs-on: macos-latest
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, '-beta') &&
      !contains(github.ref, '-alpha')
    steps:
      - name: Checkout main repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Update Homebrew formulas
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          chmod +x ./hacks/update-homebrew.sh
          ./hacks/update-homebrew.sh \
            "${{ github.repository }}" \
            "${{ github.ref_name }}" \
            "hcavarsan/homebrew-kftray" \
            "${{ secrets.GH_PAT }}"

