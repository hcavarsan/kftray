name: PR

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  RUST_BACKTRACE: 1

jobs:
  eslint-format:
    name: ESLint
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 9
          run_install: |
            - recursive: true
              args: [--frozen-lockfile]

      - name: Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Perform linting
        run: pnpm lint:front

  rust-format:
    name: rustfmt
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install dependencies
        run: |
          echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/ubuntu-jammy-main.list
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          toolchain: nightly

      - name: Install Rust nightly
        run: rustup toolchain install nightly

      - name: Install rustfmt for nightly
        run: rustup component add --toolchain nightly rustfmt

      - name: Run rustfmt
        run: cargo +nightly fmt --all -- --check

  rust-lint:
    name: Clippy
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            os_name: linux
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            os_name: macos
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            os_name: windows
            rust_target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install dependencies (Linux)
        if: matrix.os_name == 'linux'
        run: |
          echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/ubuntu-jammy-main.list
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libsoup2.4-dev \
            libwebkit2gtk-4.0-37=2.36.0-2ubuntu1 \
            libwebkit2gtk-4.0-dev=2.36.0-2ubuntu1 \
            libjavascriptcoregtk-4.0-18=2.36.0-2ubuntu1 \
            libjavascriptcoregtk-4.0-dev=2.36.0-2ubuntu1 \
            gir1.2-javascriptcoregtk-4.0=2.36.0-2ubuntu1 \
            gir1.2-webkit2-4.0=2.36.0-2ubuntu1;

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2
        with:
          toolchain: nightly

      - name: Install OpenSSL on Windows
        if: matrix.os == 'windows-latest'
        run: choco install openssl

      - name: Set up Perl on Windows
        if: matrix.os == 'windows-latest'
        uses: shogo82148/actions-setup-perl@22423f01bde48fb88785c007e3166fbbbd8e892a
        with:
          perl-version: "5.32"
          distribution: "strawberry"

      - name: Set Perl environment variables
        if: matrix.os == 'windows-latest'
        run: |
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Configure Rust targets
        run: rustup target add ${{ matrix.rust_target }}
        shell: bash

      - name: build kftray-helper
        run: cargo build --bin kftray-helper --release

      - name: Run Clippy
        run: cargo clippy --workspace --all-targets --allow-dirty --allow-staged --all-features --fix -- -D warnings

  rust-coverage:
    name: Code Coverage
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      statuses: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install dependencies
        run: |
          echo "deb http://gb.archive.ubuntu.com/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/ubuntu-jammy-main.list
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libsoup2.4-dev \
            libwebkit2gtk-4.0-37=2.36.0-2ubuntu1 \
            libwebkit2gtk-4.0-dev=2.36.0-2ubuntu1 \
            libjavascriptcoregtk-4.0-18=2.36.0-2ubuntu1 \
            libjavascriptcoregtk-4.0-dev=2.36.0-2ubuntu1 \
            gir1.2-javascriptcoregtk-4.0=2.36.0-2ubuntu1 \
            gir1.2-webkit2-4.0=2.36.0-2ubuntu1;

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2

      - name: Install Rust nightly
        run: rustup toolchain install nightly

      - name: Install llvm-tools
        run: rustup component add llvm-tools

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@21821ab872cd9e85050ce71226e602c2fadf2274

      - name: Install nextest
        uses: taiki-e/install-action@a761292ced99fc08cbae630a81f800d2d49b8bf4

      - name: Install rust-cache
        uses: swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6

      - name: Install cargo-insta
        run: cargo install cargo-insta

      - name: Run tests
        run: cargo build --bin kftray-helper --release && INSTA_UPDATE=1 cargo llvm-cov nextest --profile ci --config-file .cargo/nextest.toml --locked --workspace --all-features --lib --bins --examples --tests --lcov --output-path lcov.info

      - name: Upload coverage
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          slug: hcavarsan/kftray

      - name: Upload test results
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f
        if: ${{ !cancelled() }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: target/nextest/ci/junit.xml
          slug: hcavarsan/kftray

  frontend-bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 9
          run_install: |
            - recursive: true
              args: [--frozen-lockfile]

      - name: Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Build frontend with bundle analysis
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: cd frontend && pnpm build

  build-and-push-docker:
    needs:
      [
        eslint-format,
        rust-format,
        rust-lint,
        rust-coverage,
        frontend-bundle-analysis,
      ]
    if: ${{ contains(github.event.pull_request.title, '[docker]') }}
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@09d2acae674a48949e3602304ab46fd20ae0c42f

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0
        with:
          platforms: linux/amd64,linux/arm64
          context: ./crates/kftray-server
          file: ./crates/kftray-server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kftray-server:${{ github.sha }}
